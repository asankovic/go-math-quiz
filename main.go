package main

import (
	"flag"
	"fmt"
	"log"
	"strings"
)

type quizOptions struct {
	filePath  *string
	quantity  *int
	level     *int
	shuffle   *bool
	timeLimit *int
}

type quizTask struct {
	question string
	answer   string
}

func main() {
	options := quizOptions{}
	loadFlagOptions(&options)
	tasks := prepareQuiz(options)

	playAgain := "Y"
	for strings.ToUpper(playAgain) == "Y" {
		runQuiz(tasks, options)
		fmt.Print("Would you like to play again (same configuration will be used)? (Y/N) ")
		fmt.Scan(&playAgain)
	}
	fmt.Println("Thanks for playing, bye! ðŸ‘‹")
}

func loadFlagOptions(options *quizOptions) {
	options.filePath = flag.String("file", "", "CSV file containing tasks for quiz. Format must be 'task,answer'. If not passed, random tasks will be generated by the program.")
	options.quantity = flag.Int("quantity", 10, "Number of tasks per session.")
	options.shuffle = flag.Bool("shuffle", false, "Wether tasks should be shuffled before each session.")
	options.timeLimit = flag.Int("timeLimit", 0, "Time, in seconds, you will have to solve the tasks. 0 means there is no time limit.")
	options.level = flag.Int("level", 1, "Level is considered only when generating tasks. Number of level basically corresponds to number of digits in numbers used for tasks. Max level is 4, if passed higher number, it will be defaulted to 1.  Example: choosing level 2 may generate numbers between 10 and 100 (not including 100) for your tasks.")
	flag.Parse()
}

func prepareQuiz(options quizOptions) []quizTask {
	if *options.filePath != "" {
		return readTasks(*options.filePath)
	}

	if *options.level > 4 {
		*options.level = 1
	}

	tasks := generateTasks(options)
	log.Printf("Generated tasks (level %d) saved to '%s', feel free to check them out later on (or cheat, no one will know ðŸ˜‰ )!", *options.level, saveTasks(tasks))
	return tasks
}

func checkErr(err error, msg string) {
	if err != nil {
		log.Printf("%s: %v", msg, err)
	}
}

func checkFatalErr(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %v", msg, err)
	}
}
